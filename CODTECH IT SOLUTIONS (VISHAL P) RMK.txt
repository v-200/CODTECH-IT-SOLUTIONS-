TASK ONE 
LED BLINKING WITH ARDUINO
    

     program arduino board to blink an led at a specific interval. this project introduces basic embedded programming concepts and interacting with hardware



     // Pin connected to the LED
const int ledPin = 13;

// Interval at which to blink (milliseconds)
const long interval = 1000; // 1000 milliseconds = 1 second

// Variable to store the last time LED was updated
unsigned long previousMillis = 0;

// Initially, LED is off
int ledState = LOW;

void setup() {
  // Initialize the digital pin as an output
  pinMode(ledPin, OUTPUT);
}

void loop() {
  // Get the current time
  unsigned long currentMillis = millis();

  // Check if it's time to blink the LED
  if (currentMillis - previousMillis >= interval) {
    // Save the last time you blinked the LED
    previousMillis = currentMillis;

    // If the LED is off, turn it on; if it's on, turn it off
    if (ledState == LOW) {
      ledState = HIGH;
    } else {
      ledState = LOW;
    }

    // Write the LED state
    digitalWrite(ledPin, ledState);
  }
}




TASK TWO
     
TEMPERATURE AND HUMIDITY MONITORING WITH DHT SENSOR


interface a DHT sensor with an arduino to measure temperature and humidity. display the  readings on an LCD screen or serial monitor


     
      #include "DHT.h"

#define DHTPIN 2     // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11   // DHT 11

DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(9600);
  dht.begin();
}

void loop() {
  // Wait a few seconds between measurements.
  delay(2000);

  // Reading temperature or humidity takes about 250 milliseconds!
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  // Check if any reads failed and exit early (to try again).
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.print(" %\t");
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println(" *C");
}
      

code for LED SCREEN



 #include "DHT.h"
#include <LiquidCrystal.h>

#define DHTPIN 2     // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11   // DHT 11

DHT dht(DHTPIN, DHTTYPE);

// Initialize the library with the numbers of the interface pins
LiquidCrystal lcd(7, 8, 9, 10, 11, 12);

void setup() {
  lcd.begin(16, 2);
  dht.begin();
}

void loop() {
  // Wait a few seconds between measurements.
  delay(2000);

  // Reading temperature or humidity takes about 250 milliseconds!
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  // Check if any reads failed and exit early (to try again).
  if (isnan(humidity) || isnan(temperature)) {
    lcd.clear();
    lcd.print("Failed to read");
    lcd.setCursor(0, 1);
    lcd.print("from DHT sensor");
    return;
  }

  // Clear the LCD screen
  lcd.clear();

  // Display humidity
  lcd.setCursor(0, 0);
  lcd.print("Humidity: ");
  lcd.print(humidity);
  lcd.print(" %");

  // Display temperature
  lcd.setCursor(0, 1);
  lcd.print("Temp: ");
  lcd.print(temperature);
  lcd.print(" C");
}



TASK THREE


HOME AUTOMATION SYSTEM WITH RASPBERRY PI


CREATE A home automation system using a Raspberry pi. control appliances (like lights or fans ) via a web interface or mobile app


  
     sudo apt-get update
     sudo apt-get upgrade


     sudo apt-get install python3-flask
     sudo apt-get install python3-gpiozero

      
      from flask import Flask, render_template, request
from gpiozero import OutputDevice

app = Flask(__name__)

light = OutputDevice(17)
fan = OutputDevice(27)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/control', methods=['POST'])
def control():
    appliance = request.form['appliance']
    action = request.form['action']

    if appliance == 'light':
        if action == 'on':
            light.on()
        else:
            light.off()
    elif appliance == 'fan':
        if action == 'on':
            fan.on()
        else:
            fan.off()
    
    return 'OK'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)


     <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home Automation</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .container { width: 300px; margin: 0 auto; text-align: center; }
        button { width: 100px; height: 50px; margin: 10px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Home Automation</h1>
        <h2>Light</h2>
        <button onclick="control('light', 'on')">ON</button>
        <button onclick="control('light', 'off')">OFF</button>
        <h2>Fan</h2>
        <button onclick="control('fan', 'on')">ON</button>
        <button onclick="control('fan', 'off')">OFF</button>
    </div>
    <script>
        function control(appliance, action) {
            fetch('/control', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `appliance=${appliance}&action=${action}`
            });
        }
    </script>
</body>
</html>


     python3 app.py


TASK FOUR
  

       REAL-TIME DATA LOGGING WITH STM32


      program an STM32 microcontroller  to log sensor data  in real-time store data  on a SD card  or send  it over a wireless module  like WIFI  OR BLUETOOTH

     

      #include "ff.h"
#include "diskio.h"

FATFS fs;
FIL file;

void SD_Init() {
    // Initialize the SD card
    ...
}

void SD_LogData(char *data) {
    // Open file and write data
    ...
}
   

    #include "stm32f4xx_hal.h"

UART_HandleTypeDef huart;

void UART_Init() {
    // Initialize UART for Bluetooth module
    huart.Instance = USARTx;
    huart.Init.BaudRate = 9600;
    huart.Init.WordLength = UART_WORDLENGTH_8B;
    huart.Init.StopBits = UART_STOPBITS_1;
    huart.Init.Parity = UART_PARITY_NONE;
    huart.Init.Mode = UART_MODE_TX_RX;
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
    HAL_UART_Init(&huart);
}

void UART_SendData(char *data) {
    // Send data over UART
    HAL_UART_Transmit(&huart, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
}



TASK FIVE 
     
VECHILE TRACKING SYSTEM WITH GPS AND GSM
    
#include "stm32f4xx_hal.h"

UART_HandleTypeDef huart;

void UART_Init() {
    // Initialize UART for Bluetooth module
    huart.Instance = USARTx;
    huart.Init.BaudRate = 9600;
    huart.Init.WordLength = UART_WORDLENGTH_8B;
    huart.Init.StopBits = UART_STOPBITS_1;
    huart.Init.Parity = UART_PARITY_NONE;
    huart.Init.Mode = UART_MODE_TX_RX;
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
    HAL_UART_Init(&huart);
}

void UART_SendData(char *data) {
    // Send data over UART
    HAL_UART_Transmit(&huart, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
}



TASK FIVE 


VECHILE TRACKING SYSTEM WITH GPS and GSM



  develop a vechile tracking system using arduino or a  similar microcontroller with GPS AND GSM modules . track the vechiles location on real time and send the  data to a web server for display



    #include <SoftwareSerial.h>
#include <TinyGPS++.h>

SoftwareSerial gsmSerial(7, 8); // RX, TX pins for GSM module
SoftwareSerial gpsSerial(3, 4); // RX, TX pins for GPS module
TinyGPSPlus gps;

String apn = "your_APN"; // APN of your SIM card provider
String gprsUser = "user";
String gprsPass = "password";

void setup() {
  Serial.begin(9600);   // Serial monitor
  gsmSerial.begin(9600); // GSM module
  gpsSerial.begin(9600); // GPS module

  delay(1000);
  Serial.println("Vehicle Tracking System");

  // Initialize GSM module
  gsmInit();
}

void loop() {
  // Read GPS data
  while (gpsSerial.available() > 0) {
    if (gps.encode(gpsSerial.read())) {
      if (gps.location.isValid()) {
        float lat = gps.location.lat();
        float lng = gps.location.lng();
        Serial.print("Latitude: ");
        Serial.println(lat, 6);
        Serial.print("Longitude: ");
        Serial.println(lng, 6);

        // Send GPS data via GSM
        sendData(lat, lng);
      }
    }
  }
}

void gsmInit() {
  gsmSerial.println("AT");
  delay(1000);
  gsmSerial.println("AT+CGATT=1");
  delay(2000);
  gsmSerial.println("AT+SAPBR=3,1,\"Contype\",\"GPRS\"");
  delay(2000);
  gsmSerial.print("AT+SAPBR=3,1,\"APN\",\"");
  gsmSerial.print(apn);
  gsmSerial.println("\"");
  delay(2000);
  gsmSerial.println("AT+SAPBR=1,1");
  delay(3000);
  gsmSerial.println("AT+SAPBR=2,1");
  delay(2000);
  gsmSerial.println("AT+HTTPINIT");
  delay(2000);
  gsmSerial.println("AT+HTTPPARA=\"CID\",1");
  delay(2000);
}

void sendData(float lat, float lng) {
  gsmSerial.println("AT+HTTPPARA=\"URL\",\"http://your_server_url.com/?lat=" + String(lat, 6) + "&lng=" + String(lng, 6) + "\"");
  delay(2000);
  gsmSerial.println("AT+HTTPACTION=0");
  delay(5000); // Adjust delay as needed for response
  gsmSerial.println("AT+HTTPTERM");
  delay(2000);
}




TASK SIX
   
    SMART HOME IOT SYSTEM

   
    import Adafruit_DHT

DHT_SENSOR = Adafruit_DHT.DHT22
DHT_PIN = 4

humidity, temperature = Adafruit_DHT.read_retry(DHT_SENSOR, DHT_PIN)

if humidity is not None and temperature is not None:
    print(f"Temperature={temperature:.2f}*C, Humidity={humidity:.2f}%")
else:
    print("Failed to retrieve data from DHT sensor")

import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.OUT)

GPIO.output(17, GPIO.HIGH)  # Turn on relay connected to GPIO 17
time.sleep(5)  # Wait for 5 seconds
GPIO.output(17, GPIO.LOW)   # Turn off relay
GPIO.cleanup()  # Reset GPIO settings

import paho.mqtt.client as mqtt
import json
import time

# MQTT broker details
broker = "mqtt.yourserver.com"
port = 1883
topic = "smart-home/sensors"

# Create MQTT client instance
client = mqtt.Client()

# Connect to broker
client.connect(broker, port)

# Example sensor data (replace with actual sensor readings)
sensor_data = {
    "temperature": 25.5,
    "humidity": 50.2
}

# Publish data to MQTT topic
client.publish(topic, json.dumps(sensor_data))

# Disconnect from broker
client.disconnect()
from flask import Flask, render_template, request
import paho.mqtt.client as mqtt
import json

app = Flask(__name__)

# MQTT broker details
broker = "mqtt.yourserver.com"
port = 1883
topic = "smart-home/controls"

# MQTT client setup
client = mqtt.Client()

def on_connect(client, userdata, flags, rc):
    print("Connected with result code " + str(rc))

client.on_connect = on_connect
client.connect(broker, port)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/control', methods=['POST'])
def control():
    if request.method == 'POST':
        action = request.form['action']
        payload = {"action": action}
        client.publish(topic, json.dumps(payload))
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')





  


